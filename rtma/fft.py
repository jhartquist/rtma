# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_fft.ipynb (unless otherwise specified).

__all__ = ['is_power_of_two', 'fft_analysis', 'fft_synthesis']

# Cell
from .imports import *
from .signal import *

# Cell
def is_power_of_two(n: int) -> bool:
    return n > 1 and (n & (n-1)) == 0

# Cell
def fft_analysis(x, n_fft):
    assert x.size <= n_fft
    assert is_power_of_two(n_fft)

    pos_n_fft = (n_fft // 2) + 1
    thresh = 1e-14

    m1 = x.size // 2
    m2 = (x.size+1) // 2

    fft_buffer = np.zeros(n_fft)
    fft_buffer[:m2] = x[m1:]
    fft_buffer[-m1:] = x[:m1]
    X = np.fft.rfft(fft_buffer)[:pos_n_fft]

    magnitude = abs(X)

    X.real[abs(X.real) < thresh] = 0.0
    X.imag[abs(X.imag) < thresh] = 0.0
    phase = np.unwrap(np.angle(X))

    return magnitude, phase

# Cell
def fft_synthesis(m_x, p_x, m):
    assert m_x.shape == p_x.shape

    pos_n_fft = m_x.size
    n_fft = (pos_n_fft - 1) * 2
    assert is_power_of_two(n_fft)

    Y = m_x * np.exp(1j * p_x)
    fft_buffer = np.fft.irfft(Y)

    m1 = m // 2
    m2 = (m+1) // 2

    y = np.zeros(m)
    y[:m1] = fft_buffer[-m1:]
    y[m1:] = fft_buffer[:m2]

    return y